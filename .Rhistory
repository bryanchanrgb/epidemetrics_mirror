"C2_WORKPLACE_CLOSING_DAYS_ABOVE_THRESHOLD",
"C3_CANCEL_PUBLIC_EVENTS_DAYS_ABOVE_THRESHOLD",
"C4_RESTRICTIONS_ON_GATHERINGS_DAYS_ABOVE_THRESHOLD",
"C5_CLOSE_PUBLIC_TRANSPORT_DAYS_ABOVE_THRESHOLD",
"C6_STAY_AT_HOME_REQUIREMENTS_DAYS_ABOVE_THRESHOLD",
"C7_RESTRICTIONS_ON_INTERNAL_MOVEMENT_DAYS_ABOVE_THRESHOLD",
"C8_INTERNATIONAL_TRAVEL_CONTROLS_DAYS_ABOVE_THRESHOLD")
for (x in x_vars) {
for (y in c("EPI_CONFIRMED_PER_10K","EPI_DEAD_PER_10K")) { # with log10 y axis
figure_2c_loop <- (ggplot(figure_2c_data, aes_string(x = x, y = y, colour = "CLASS"))
+ geom_point(size=1.5,shape=1,alpha=0.9,stroke=1.5, na.rm=TRUE)
+ geom_text(data=subset(figure_2c_data,
(COUNTRYCODE %in% label_countries)),
aes(label=COUNTRY),
hjust=-0.1, vjust=-0.1,
show.legend = FALSE)
+ theme_light()
+ scale_y_continuous(trans='log10', breaks = log_breaks(n=10,base=10))
+ theme(plot.title=element_text(hjust = 0.5), axis.line=element_line(color="black",size=0.7),axis.ticks=element_line(color="black",size=0.7))
+ scale_color_manual(values = my_palette_1, name = "Epidemic Wave State", labels = c("Entering First Wave", "Past First Wave", "Entering Second Wave","Past Second Wave")))
ggsave(paste("./plots/figure_2c/figure_2c_",x,"_",y,".png",sep=''), plot = figure_2c_loop, width = 9,  height = 7)
}
y = "EPI_DURATION_FIRST_WAVE" # with linear axis
figure_2c_loop <- (ggplot(figure_2c_data, aes_string(x = x, y = y, colour = "CLASS"))
+ geom_point(size=1.5,shape=1,alpha=0.9,stroke=1.5, na.rm=TRUE)
+ geom_text(data=subset(figure_2c_data,
(COUNTRYCODE %in% label_countries)),
aes(label=COUNTRY),
hjust=-0.1, vjust=-0.1,
show.legend = FALSE)
+ theme_light()
+ theme(plot.title=element_text(hjust = 0.5), axis.line=element_line(color="black",size=0.7),axis.ticks=element_line(color="black",size=0.7))
+ scale_color_manual(values = my_palette_1, name = "Epidemic Wave State", labels = c("Entering First Wave", "Past First Wave", "Entering Second Wave","Past Second Wave")))
ggsave(paste("./plots/figure_2c/figure_2c_",x,"_",y,".png",sep=''), plot = figure_2c_loop, width = 9,  height = 7)
}
# Import Data for figure 4 -------------------------------------------------------------------
# Import csv file for figure 4: Time series and choropleth for USA
figure_4a_data <- read_csv(file="./data/figure_4a.csv",
na = c("N/A","NA","#N/A"," ",""),
col_types = cols(countrycode = col_factor(levels = NULL),
date = col_date(format = "%Y-%m-%d"),
adm_area_1 = col_factor(levels = NULL)))
# Import Data for figure 4 -------------------------------------------------------------------
# Import csv file for figure 4: Time series and choropleth for USA
figure_4a_data <- read_csv(file="./data/figure_4a.csv",
na = c("N/A","NA","#N/A"," ",""))
figure_4a_data$countrycode <- as.factor(figure_4a_data$countrycode)
figure_4a_data <- read_csv(file="./data/figure_4a.csv",
na = c("N/A","NA","#N/A"," ",""))
figure_4a_data$countrycode <- as.factor(figure_4a_data$countrycode)
figure_4a_data$adm_area_1 <- as.factor(figure_4a_data$adm_area_1)
figure_4a_max <- aggregate(figure_4a_data[c("confirmed")],
by = list(figure_4a_data$adm_area_1),
FUN = max,
na.rm=TRUE)
figure_4a_max <- plyr::rename(figure_4a_max, c("Group.1"="adm_area_1"))
figure_4a_max <- figure_4a_max[order(-figure_4a_max$confirmed),]
top_n <- head(figure_4a_max$adm_area_1,10)
top_n <- head(figure_4a_max$adm_area_1,10)
figure_4a_data$State <- figure_4a_data$adm_area_1
levels(figure_4a_data$State) <- c(levels(figure_4a_data$State), "Others")
figure_4a_data[!figure_4a_data$adm_area_1%in%top_n,"State"] <- "Others"
top_n
figure_4a_max
View(figure_4a_data)
figure_4a_order_longitude <- figure_4a_data[figure_4a_data$adm_area_1%in%top_n,c("adm_area_1","longitude")]
figure_4a_order_longitude
figure_4a_longitudes <- figure_4a_data[figure_4a_data$adm_area_1%in%top_n,c("adm_area_1","longitude")]
figure_4a_longitudes <- unique(figure_4a_data[figure_4a_data$adm_area_1%in%top_n,c("adm_area_1","longitude")])
figure_4a_longitudes
figure_4a_longitudes <- figure_4a_longitudes[order(figure_4a_longitudes$longitude),]
figure_4a_longitudes
figure_4a_data$State <- figure_4a_data$adm_area_1
levels(figure_4a_data$State) <- c(levels(figure_4a_data$State), "Others")
figure_4a_data[!figure_4a_data$adm_area_1%in%top_n,"State"] <- "Others"
figure_4a_data$State <- factor(figure_4a_data$State, levels=c(lapply(figure_4a_longitudes, as.character), "Others"))
figure_4a_agg <- aggregate(figure_4a_data[c("new_per_day_smooth")],
by = list(figure_4a_data$State,figure_4a_data$date),
FUN = sum,
na.rm=TRUE)
figure_4a_agg <- plyr::rename(figure_4a_agg, c("Group.1"="State","Group.2"="date"))
my_palette_1 <- brewer.pal(name="YlGnBu",n=4)[2]
my_palette_2 <- brewer.pal(name="YlGnBu",n=4)[4]
my_palette_3 <- "GnBu"
my_palette_4 <- brewer.pal(name="Oranges",n=4)[4]
y_max = max(figure_4a_data_agg$new_cases)
# Figure 4a: Stacked Area Time series of US counties
figure_4a <-  (ggplot(data=figure_4a_agg, aes(x=date,y=new_per_day_smooth,fill=State))
+ geom_area(alpha=0.8, colour="white", na.rm=TRUE)
+ scale_fill_viridis(discrete=T)
+ labs(title="New Cases Over Time for US States", y="New Cases per Day (Smoothed)", x="Date")
+ scale_x_date(date_breaks="months", date_labels="%b")
+ scale_y_continuous(expand=c(0,0), limits=c(0, NA))
+ theme_light()
+ theme(plot.title = element_text(hjust = 0.5), axis.line=element_line(color="black",size=0.7),axis.ticks=element_line(color="black",size=0.7)
,plot.margin=unit(c(0,0,0,0),"pt"), legend.position = c(0.07, 0.75)))
figure_4a
figure_4a_agg
View(figure_4a_data)
figure_4a_data$State <- figure_4a_data$adm_area_1
levels(figure_4a_data$State) <- c(levels(figure_4a_data$State), "Others")
figure_4a_data[!figure_4a_data$adm_area_1%in%top_n,"State"] <- "Others"
figure_4a_longitudes <- figure_4a_longitudes[order(figure_4a_longitudes$longitude),"adm_area_1"]
figure_4a_longitudes
figure_4a_data$State <- figure_4a_data$adm_area_1
levels(figure_4a_data$State) <- c(levels(figure_4a_data$State), "Others")
figure_4a_data[!figure_4a_data$adm_area_1%in%top_n,"State"] <- "Others"
figure_4a_data$State <- factor(figure_4a_data$State, levels=c(lapply(figure_4a_longitudes, as.character), "Others"))
figure_4a_data$State <- figure_4a_data$adm_area_1
levels(figure_4a_data$State) <- c(levels(figure_4a_data$State), "Others")
top_n
figure_4a_data[!figure_4a_data$adm_area_1%in%top_n,"State"] <- "Others"
figure_4a_longitudes
c(lapply(figure_4a_longitudes, as.character), "Others")
top_n
list(figure_4a_longitudes)
as.list(figure_4a_longitudes)
c(lapply(as.list(figure_4a_longitudes), as.character), "Others")
lapply(figure_4a_longitudes, as.character)
c(lapply(figure_4a_longitudes, as.character), "Others")
append(lapply(figure_4a_longitudes, as.character), "Others")
lapply(figure_4a_longitudes, as.character)
c(lapply(figure_4a_longitudes, as.character)
c(lapply(figure_4a_longitudes, as.character))+ "Others")
list(lapply(figure_4a_longitudes, as.character))+ "Others")
figure_4a_data$State <- factor(figure_4a_data$State, levels=c(lapply(figure_4a_longitudes, as.character), "Others"))
c(lapply(figure_4a_longitudes, as.character), "Others")
vector <- c(lapply(figure_4a_longitudes, as.character),"Others")
vector <- c(c(lapply(figure_4a_longitudes, as.character)),"Others")
vector
c(lapply(figure_4a_longitudes, as.character))
mylist <- lapply(figure_4a_longitudes, as.character)
mylist
mylist <- c(mylist,"Others")
mylist
mylist <- lapply(figure_4a_longitudes, as.character)
mylist[1] <- c(mylist,"Others")
c(mylist,"Others")
mylist <- list(lapply(figure_4a_longitudes, as.character))
mylist <- c(lapply(figure_4a_longitudes, as.character))
figure_4a_longitudes <- figure_4a_longitudes[order(figure_4a_longitudes$longitude),]
figure_4a_longitudes <- unique(figure_4a_data[figure_4a_data$adm_area_1%in%top_n,c("adm_area_1","longitude")])
figure_4a_longitudes <- figure_4a_longitudes[order(figure_4a_longitudes$longitude),]
figure_4a_longitudes <- figure_4a_longitudes$adm_area_1
c(lapply(figure_4a_longitudes, as.character), "Others")
figure_4a_max <- aggregate(figure_4a_data[c("confirmed")],
by = list(figure_4a_data$adm_area_1),
FUN = max,
na.rm=TRUE)
figure_4a_max <- plyr::rename(figure_4a_max, c("Group.1"="adm_area_1"))
figure_4a_max <- figure_4a_max[order(-figure_4a_max$confirmed),]
top_n <- head(figure_4a_max$adm_area_1,10)
figure_4a_longitudes <- unique(figure_4a_data[figure_4a_data$adm_area_1%in%top_n,c("adm_area_1","longitude")])
figure_4a_longitudes <- figure_4a_longitudes[order(figure_4a_longitudes$longitude),]
figure_4a_longitudes <- figure_4a_longitudes$adm_area_1
figure_4a_data$State <- figure_4a_data$adm_area_1
levels(figure_4a_data$State) <- c(levels(figure_4a_data$State), "Others")
figure_4a_data[!figure_4a_data$adm_area_1%in%top_n,"State"] <- "Others"
figure_4a_data$State <- factor(figure_4a_data$State, levels=c(lapply(figure_4a_longitudes, as.character), "Others"))
figure_4a_agg <- aggregate(figure_4a_data[c("new_per_day_smooth")],
by = list(figure_4a_data$State,figure_4a_data$date),
FUN = sum,
na.rm=TRUE)
figure_4a_agg <- plyr::rename(figure_4a_agg, c("Group.1"="State","Group.2"="date"))
# Figure 4a: Stacked Area Time series of US counties
figure_4a <-  (ggplot(data=figure_4a_agg, aes(x=date,y=new_per_day_smooth,fill=State))
+ geom_area(alpha=0.8, colour="white", na.rm=TRUE)
+ scale_fill_viridis(discrete=T)
+ labs(title="New Cases Over Time for US States", y="New Cases per Day (Smoothed)", x="Date")
+ scale_x_date(date_breaks="months", date_labels="%b")
+ scale_y_continuous(expand=c(0,0), limits=c(0, NA))
+ theme_light()
+ theme(plot.title = element_text(hjust = 0.5), axis.line=element_line(color="black",size=0.7),axis.ticks=element_line(color="black",size=0.7)
,plot.margin=unit(c(0,0,0,0),"pt"), legend.position = c(0.07, 0.75)))
figure_4a
v_palette =  viridis(11, option = &amp;quot;D&amp;quot;)
# Figure 4a: Stacked Area Time series of US counties
v_palette =  viridis(11, option="D")
v_palette
my_palette_4
v_palette[11]
v_palette[11] <- "#D3D3D3"
# Figure 4a: Stacked Area Time series of US counties
figure_4a <-  (ggplot(data=figure_4a_agg, aes(x=date,y=new_per_day_smooth,fill=State))
+ geom_area(alpha=0.8, colour="white", na.rm=TRUE)
+ scale_fill_manual(palette = v_palette)
+ labs(title="New Cases Over Time for US States", y="New Cases per Day (Smoothed)", x="Date")
+ scale_x_date(date_breaks="months", date_labels="%b")
+ scale_y_continuous(expand=c(0,0), limits=c(0, NA))
+ theme_light()
+ theme(plot.title = element_text(hjust = 0.5), axis.line=element_line(color="black",size=0.7),axis.ticks=element_line(color="black",size=0.7)
,plot.margin=unit(c(0,0,0,0),"pt"), legend.position = c(0.07, 0.75)))
figure_4a
# Figure 4a: Stacked Area Time series of US counties
figure_4a <-  (ggplot(data=figure_4a_agg, aes(x=date,y=new_per_day_smooth,fill=State))
+ geom_area(alpha=0.8, colour="white", na.rm=TRUE)
+ scale_fill_manual(values = v_palette)
+ labs(title="New Cases Over Time for US States", y="New Cases per Day (Smoothed)", x="Date")
+ scale_x_date(date_breaks="months", date_labels="%b")
+ scale_y_continuous(expand=c(0,0), limits=c(0, NA))
+ theme_light()
+ theme(plot.title = element_text(hjust = 0.5), axis.line=element_line(color="black",size=0.7),axis.ticks=element_line(color="black",size=0.7)
,plot.margin=unit(c(0,0,0,0),"pt"), legend.position = c(0.07, 0.75)))
figure_4a
v_palette[11] <- "#C0C0C0"
# Figure 4a: Stacked Area Time series of US counties
figure_4a <-  (ggplot(data=figure_4a_agg, aes(x=date,y=new_per_day_smooth,fill=State))
+ geom_area(alpha=0.8, colour="white", na.rm=TRUE)
+ scale_fill_manual(values = v_palette)
+ labs(title="New Cases Over Time for US States", y="New Cases per Day (Smoothed)", x="Date")
+ scale_x_date(date_breaks="months", date_labels="%b")
+ scale_y_continuous(expand=c(0,0), limits=c(0, NA))
+ theme_light()
+ theme(plot.title = element_text(hjust = 0.5), axis.line=element_line(color="black",size=0.7),axis.ticks=element_line(color="black",size=0.7)
,plot.margin=unit(c(0,0,0,0),"pt"), legend.position = c(0.07, 0.75)))
ggsave("./plots/figure_4a.png", plot = figure_4a, width = 15,  height = 7)
figure_4a
figure_2a_data <- subset(figure_2a_data,CLASS%in%c(1,2,3,4))
figure_2b_data <- subset(figure_2b_data,CLASS%in%c(1,2,3,4))
figure_2c_data <- subset(figure_2c_data,CLASS%in%c(1,2,3,4))
# Aggregate data by class and t_pop, mean mean and sd for each date
figure_2a_agg <- aggregate(figure_2a_data[c("stringency_index")],
by = list(figure_2a_data$CLASS, figure_2a_data$t_pop),
FUN = mean)
figure_2a_agg <- plyr::rename(figure_2a_agg, c("Group.1"="CLASS", "Group.2"="t_pop","stringency_index"="mean_si"))
figure_2a_sd <- aggregate(figure_2a_data[c("stringency_index")],
by = list(figure_2a_data$CLASS, figure_2a_data$t_pop),
FUN = sd)
figure_2a_sd <- plyr::rename(figure_2a_sd, c("Group.1"="CLASS", "Group.2"="t_pop","stringency_index"="sd_si"))
figure_2a_agg <- merge(figure_2a_agg,figure_2a_sd, by=c("CLASS","t_pop"))
figure_2b_agg <- aggregate(figure_2b_data[c("residential","workplace","transit_stations","retail_recreation")],
by = list(figure_2b_data$CLASS, figure_2b_data$t_pop),
FUN = mean)
figure_2b_agg <- plyr::rename(figure_2b_agg, c("Group.1"="CLASS", "Group.2"="t_pop"))
figure_2b_sd <- aggregate(figure_2b_data[c("residential","workplace","transit_stations","retail_recreation")],
by = list(figure_2b_data$CLASS, figure_2b_data$t_pop),
FUN = sd)
figure_2b_sd <- plyr::rename(figure_2b_sd, c("Group.1"="CLASS", "Group.2"="t_pop"))
figure_2b_agg <- merge(figure_2b_agg,figure_2b_sd, by=c("CLASS","t_pop"))
# Get the number of elements in each class to work out the t_pop xlim values
figure_2a_count <- aggregate(figure_2a_data[c("stringency_index")],
by = list(figure_2a_data$CLASS, figure_2a_data$t_pop),
FUN = length)
figure_2a_count <- plyr::rename(figure_2a_count, c("Group.1"="CLASS", "Group.2"="t_pop","stringency_index"="n_present"))
figure_2a_count_max <- aggregate(figure_2a_count[c("n_present")],
by = list(figure_2a_count$CLASS),
FUN = max)
figure_2a_count_max <- plyr::rename(figure_2a_count_max, c("Group.1"="CLASS","n_present"="n_total"))
figure_2a_count <- merge(figure_2a_count,figure_2a_count_max, by="CLASS")
figure_2b_count <- aggregate(figure_2b_data[c("residential")],
by = list(figure_2b_data$CLASS, figure_2b_data$t_pop),
FUN = length)
figure_2b_count <- plyr::rename(figure_2b_count, c("Group.1"="CLASS", "Group.2"="t_pop","residential"="n_present"))
figure_2b_count_max <- aggregate(figure_2b_count[c("n_present")],
by = list(figure_2b_count$CLASS),
FUN = max)
figure_2b_count_max <- plyr::rename(figure_2b_count_max, c("Group.1"="CLASS","n_present"="n_total"))
figure_2b_count <- merge(figure_2b_count,figure_2b_count_max, by="CLASS")
# n_threshold determines where to cut off t_pop xlim values. Only takes t_pop values for which there are >= n_threshold % of the total present for each class
n_threshold = 0.8
figure_2a_count <- subset(figure_2a_count, n_present>=n_threshold*n_total)
figure_2b_count <- subset(figure_2b_count, n_present>=n_threshold*n_total)
t_min = min(figure_2a_count$t_pop, figure_2b_count$t_pop)
t_max = max(figure_2a_count$t_pop, figure_2b_count$t_pop)
# Figure 2b for each mobility with loess smoothing
for (mobility in mobilities)
# Figure 2b: Line plot of residential mobility over time for each country class
mobilities = c("residential", "workplace", "transit_stations", "retail_recreation")
# Figure 2b: Line plot of residential mobility over time for each country class
mobilities = c("residential", "workplace", "transit_stations", "retail_recreation")
# Figure 2b for each mobility with loess smoothing
for (mobility in mobilities)
for (mobility in mobilities)
{
figure_2b_loess <- (ggplot(figure_2b_data, aes_string(x = "t_pop", y = mobility, colour = "CLASS"))
+ geom_smooth(method="loess", level=0.95, span=0.3, na.rm=TRUE, show.legend=FALSE)
+ geom_vline(xintercept=0,linetype="dashed", color=my_palette_2, size=1)
#+ annotate("text",x=2,y=27,hjust=0,label="T0 (First Day Surpassing Cumulative 5 Cases per Million)",color=my_palette_2)
+ theme_light()
+ coord_cartesian(xlim=c(t_min, t_max))
+ scale_color_manual(values = my_palette_1, name = "Epidemic Wave State", labels = c("Entering First Wave", "Past First Wave", "Entering Second Wave","Past Second Wave"))
+ theme(plot.title=element_text(hjust = 0.5), axis.line=element_line(color="black",size=0.7),axis.ticks=element_line(color="black",size=0.7))
+ scale_x_continuous(breaks=seq(floor(t_min/10)*10,ceiling(t_max/10)*10,10),expand=c(0,0),limits=c(t_min,t_max))
+ scale_y_continuous(expand = c(0,0))
+ labs(title = paste("Average ",mobility," Mobility Over Time",sep=""), x = "Days Since T0", y = paste(mobility," Mobility (Change from Baseline, Smoothed)",sep="")))
ggsave(paste("./plots/figure_2b_loess_",mobility,".png",sep=''), plot = figure_2b_loess, width = 9,  height = 7)
}
# Plot Figure 2 ------------------------------------------------------------
# Set up colour palette
my_palette_1 <- brewer.pal(name="PuOr",n=6)[c(1,2,3,5,6)]
my_palette_2 <- brewer.pal(name="Oranges",n=4)[4]
# Figure 2b: Line plot of residential mobility over time for each country class
mobilities = c("residential", "workplace", "transit_stations", "retail_recreation")
# Figure 2b for each mobility with loess smoothing
for (mobility in mobilities)
for (mobility in mobilities)
{
figure_2b_loess <- (ggplot(figure_2b_data, aes_string(x = "t_pop", y = mobility, colour = "CLASS"))
+ geom_smooth(method="loess", level=0.95, span=0.3, na.rm=TRUE, show.legend=FALSE)
+ geom_vline(xintercept=0,linetype="dashed", color=my_palette_2, size=1)
#+ annotate("text",x=2,y=27,hjust=0,label="T0 (First Day Surpassing Cumulative 5 Cases per Million)",color=my_palette_2)
+ theme_light()
+ coord_cartesian(xlim=c(t_min, t_max))
+ scale_color_manual(values = my_palette_1, name = "Epidemic Wave State", labels = c("Entering First Wave", "Past First Wave", "Entering Second Wave","Past Second Wave"))
+ theme(plot.title=element_text(hjust = 0.5), axis.line=element_line(color="black",size=0.7),axis.ticks=element_line(color="black",size=0.7))
+ scale_x_continuous(breaks=seq(floor(t_min/10)*10,ceiling(t_max/10)*10,10),expand=c(0,0),limits=c(t_min,t_max))
+ scale_y_continuous(expand = c(0,0))
+ labs(title = paste("Average ",mobility," Mobility Over Time",sep=""), x = "Days Since T0", y = paste(mobility," Mobility (Change from Baseline, Smoothed)",sep="")))
ggsave(paste("./plots/figure_2b_loess_",mobility,".png",sep=''), plot = figure_2b_loess, width = 9,  height = 7)
}
# Plot Figure 2 ------------------------------------------------------------
# Set up colour palette
my_palette_1 <- brewer.pal(name="PuOr",n=6)[c(1,2,4,5)]
my_palette_2 <- brewer.pal(name="Oranges",n=4)[4]
# load packages
package_list <- c("readr","ggplot2","gridExtra","plyr","dplyr","ggsci","RColorBrewer",
"viridis","sf","reshape2","ggpubr","egg","scales","plotrix")
for (package in package_list){
if (!package %in% installed.packages()){
install.packages(package)
}
}
lapply(package_list, require, character.only = TRUE)
label_countries <- c("USA","GBR","ESP","BRA","JAP","IND","ZAF","BEL","AUS")
# Process Data for Figure 2 ----------------------------------------------
# Remove Others class from data. Only keep classes 1-4 for now, 5 has low sample size
figure_2a_data <- subset(figure_2a_data,CLASS%in%c(1,2,3,4))
figure_2b_data <- subset(figure_2b_data,CLASS%in%c(1,2,3,4))
figure_2c_data <- subset(figure_2c_data,CLASS%in%c(1,2,3,4))
# Aggregate data by class and t_pop, mean mean and sd for each date
figure_2a_agg <- aggregate(figure_2a_data[c("stringency_index")],
by = list(figure_2a_data$CLASS, figure_2a_data$t_pop),
FUN = mean)
figure_2a_agg <- plyr::rename(figure_2a_agg, c("Group.1"="CLASS", "Group.2"="t_pop","stringency_index"="mean_si"))
figure_2a_sd <- aggregate(figure_2a_data[c("stringency_index")],
by = list(figure_2a_data$CLASS, figure_2a_data$t_pop),
function(x) c(mean = mean(x), se = std.error(x)))
View(figure_2a_sd)
figure_2a_sd <- aggregate(figure_2a_data[c("stringency_index")],
by = list(figure_2a_data$CLASS, figure_2a_data$t_pop),
function(x) c(mean = mean(x), se = std.error(x)))
View(figure_2a_sd)
figure_2a_sd <- aggregate(figure_2a_data[c("stringency_index")],
by = list(figure_2a_data$CLASS, figure_2a_data$t_pop),
FUN = function(x) c(mean = mean(x), se = std.error(x)))
View(figure_2a_sd)
figure_2a_sd <- aggregate(figure_2a_data[c("stringency_index")],
by = list(figure_2a_data$CLASS, figure_2a_data$t_pop),
FUN = std.error(x))
figure_2a_sd <- aggregate(figure_2a_data[c("stringency_index")],
by = list(figure_2a_data$CLASS, figure_2a_data$t_pop),
FUN = std.error())
figure_2a_sd <- aggregate(figure_2a_data[c("stringency_index")],
by = list(figure_2a_data$CLASS, figure_2a_data$t_pop),
FUN = std.error)
View(figure_2a_sd)
figure_2a_sd <- plyr::rename(figure_2a_sd, c("Group.1"="CLASS", "Group.2"="t_pop","stringency_index"="se_si"))
figure_2a_agg <- merge(figure_2a_agg,figure_2a_sd, by=c("CLASS","t_pop"))
figure_2a_agg <- aggregate(figure_2a_data[c("stringency_index")],
by = list(figure_2a_data$CLASS, figure_2a_data$t_pop),
FUN = mean)
figure_2a_agg <- plyr::rename(figure_2a_agg, c("Group.1"="CLASS", "Group.2"="t_pop","stringency_index"="mean_si"))
figure_2a_sd <- aggregate(figure_2a_data[c("stringency_index")],
by = list(figure_2a_data$CLASS, figure_2a_data$t_pop),
FUN = std.error)
figure_2a_sd <- plyr::rename(figure_2a_sd, c("Group.1"="CLASS", "Group.2"="t_pop","stringency_index"="se_si"))
figure_2a_agg <- merge(figure_2a_agg,figure_2a_sd, by=c("CLASS","t_pop"))
figure_2a_alt <- (ggplot(figure_2a_agg, aes(x = t_pop, y = mean_si, colour = CLASS))
+ geom_line(size=1,show.legend = FALSE,na.rm=TRUE)
+ geom_ribbon(aes(ymin=mean_si-se_si, ymax=mean_si+se_si, fill = CLASS), linetype=2, alpha=0.1, show.legend = FALSE)
+ geom_vline(xintercept=0,linetype="dashed", color=my_palette_2, size=1)
+ annotate("text",x=2,y=97,hjust=0,label="T0 (First Day Surpassing Cumulative 5 Cases per Million)",color=my_palette_2)
+ theme_light()
+ coord_cartesian(xlim=c(t_min, t_max))
+ scale_color_manual(values = my_palette_1, name = "Epidemic Wave State", labels = c("Entering First Wave", "Past First Wave", "Entering Second Wave","Past Second Wave"))
+ theme(plot.title=element_text(hjust = 0.5), axis.line=element_line(color="black",size=0.7),axis.ticks=element_line(color="black",size=0.7))
+ scale_x_continuous(breaks=seq(floor(t_min/10)*10,ceiling(t_max/10)*10,10),expand=c(0,0),limits=c(t_min,t_max))
+ scale_y_continuous(breaks=seq(0,100,10),expand = c(0,0),limits = c(0, 100))
+ labs(title = "Average Stringency Index Over Time", x = "Days Since T0", y = "Stringency Index"))
figure_2a_alt
my_palette_1 <- brewer.pal(name="PuOr",n=6)[c(1,2,4,5)]
my_palette_2 <- brewer.pal(name="Oranges",n=4)[4]
figure_2a_alt <- (ggplot(figure_2a_agg, aes(x = t_pop, y = mean_si, colour = CLASS))
+ geom_line(size=1,show.legend = FALSE,na.rm=TRUE)
+ geom_ribbon(aes(ymin=mean_si-se_si, ymax=mean_si+se_si, fill = CLASS), linetype=2, alpha=0.1, show.legend = FALSE)
+ geom_vline(xintercept=0,linetype="dashed", color=my_palette_2, size=1)
+ annotate("text",x=2,y=97,hjust=0,label="T0 (First Day Surpassing Cumulative 5 Cases per Million)",color=my_palette_2)
+ theme_light()
+ coord_cartesian(xlim=c(t_min, t_max))
+ scale_color_manual(values = my_palette_1, name = "Epidemic Wave State", labels = c("Entering First Wave", "Past First Wave", "Entering Second Wave","Past Second Wave"))
+ theme(plot.title=element_text(hjust = 0.5), axis.line=element_line(color="black",size=0.7),axis.ticks=element_line(color="black",size=0.7))
+ scale_x_continuous(breaks=seq(floor(t_min/10)*10,ceiling(t_max/10)*10,10),expand=c(0,0),limits=c(t_min,t_max))
+ scale_y_continuous(breaks=seq(0,100,10),expand = c(0,0),limits = c(0, 100))
+ labs(title = "Average Stringency Index Over Time", x = "Days Since T0", y = "Stringency Index"))
figure_2a_alt
# Plot Figure 2 ------------------------------------------------------------
# Set up colour palette
my_palette_1 <- brewer.pal(name="PuOr",n=5)[c(1,2,4,5)]
my_palette_2 <- brewer.pal(name="Oranges",n=4)[4]
figure_2a_alt <- (ggplot(figure_2a_agg, aes(x = t_pop, y = mean_si, colour = CLASS))
+ geom_line(size=1,show.legend = FALSE,na.rm=TRUE)
+ geom_ribbon(aes(ymin=mean_si-se_si, ymax=mean_si+se_si, fill = CLASS), linetype=2, alpha=0.1, show.legend = FALSE)
+ geom_vline(xintercept=0,linetype="dashed", color=my_palette_2, size=1)
+ annotate("text",x=2,y=97,hjust=0,label="T0 (First Day Surpassing Cumulative 5 Cases per Million)",color=my_palette_2)
+ theme_light()
+ coord_cartesian(xlim=c(t_min, t_max))
+ scale_color_manual(values = my_palette_1, name = "Epidemic Wave State", labels = c("Entering First Wave", "Past First Wave", "Entering Second Wave","Past Second Wave"))
+ theme(plot.title=element_text(hjust = 0.5), axis.line=element_line(color="black",size=0.7),axis.ticks=element_line(color="black",size=0.7))
+ scale_x_continuous(breaks=seq(floor(t_min/10)*10,ceiling(t_max/10)*10,10),expand=c(0,0),limits=c(t_min,t_max))
+ scale_y_continuous(breaks=seq(0,100,10),expand = c(0,0),limits = c(0, 100))
+ labs(title = "Average Stringency Index Over Time", x = "Days Since T0", y = "Stringency Index"))
ggsave("./plots/figure_2a_sd.png", plot = figure_2a_alt, width = 9,  height = 7)
figure_2a_alt
my_palette_1
# Plot Figure 2 ------------------------------------------------------------
# Set up colour palette
my_palette_1 <- brewer.pal(name="PuOr",n=5)[c(1,2,4,5)]
figure_2a_alt <- (ggplot(figure_2a_agg, aes(x = t_pop, y = mean_si, colour = CLASS))
+ geom_line(size=1,show.legend = FALSE,na.rm=TRUE)
+ geom_ribbon(aes(ymin=mean_si-se_si, ymax=mean_si+se_si, fill = CLASS), linetype=2, alpha=0.1, show.legend = FALSE)
+ geom_vline(xintercept=0,linetype="dashed", color=my_palette_2, size=1)
+ annotate("text",x=2,y=97,hjust=0,label="T0 (First Day Surpassing Cumulative 5 Cases per Million)",color=my_palette_2)
+ theme_light()
+ coord_cartesian(xlim=c(t_min, t_max))
+ scale_color_manual(values = my_palette_1, name = "Epidemic Wave State", labels = c("Entering First Wave", "Past First Wave", "Entering Second Wave","Past Second Wave"))
+ theme(plot.title=element_text(hjust = 0.5), axis.line=element_line(color="black",size=0.7),axis.ticks=element_line(color="black",size=0.7))
+ scale_x_continuous(breaks=seq(floor(t_min/10)*10,ceiling(t_max/10)*10,10),expand=c(0,0),limits=c(t_min,t_max))
+ scale_y_continuous(breaks=seq(0,100,10),expand = c(0,0),limits = c(0, 100))
+ labs(title = "Average Stringency Index Over Time", x = "Days Since T0", y = "Stringency Index"))
ggsave("./plots/figure_2a_sd.png", plot = figure_2a_alt, width = 9,  height = 7)
figure_2b_agg <- aggregate(figure_2b_data[c("residential","workplace","transit_stations","retail_recreation")],
by = list(figure_2b_data$CLASS, figure_2b_data$t_pop),
FUN = mean)
figure_2b_agg <- plyr::rename(figure_2b_agg, c("Group.1"="CLASS", "Group.2"="t_pop"))
figure_2b_se <- aggregate(figure_2b_data[c("residential","workplace","transit_stations","retail_recreation")],
by = list(figure_2b_data$CLASS, figure_2b_data$t_pop),
FUN = std.error)
figure_2b_se <- plyr::rename(figure_2b_se, c("Group.1"="CLASS", "Group.2"="t_pop"))
figure_2b_agg <- merge(figure_2b_agg,figure_2b_sd, by=c("CLASS","t_pop"))
ggsave("./plots/figure_2a_se.png", plot = figure_2a_alt, width = 9,  height = 7)
View(figure_2b_agg)
figure_2b_agg <- aggregate(figure_2b_data[c("residential","workplace","transit_stations","retail_recreation")],
by = list(figure_2b_data$CLASS, figure_2b_data$t_pop),
FUN = mean)
figure_2b_agg <- plyr::rename(figure_2b_agg, c("Group.1"="CLASS", "Group.2"="t_pop"))
figure_2b_se <- aggregate(figure_2b_data[c("residential","workplace","transit_stations","retail_recreation")],
by = list(figure_2b_data$CLASS, figure_2b_data$t_pop),
FUN = std.error)
figure_2b_se <- plyr::rename(figure_2b_se, c("Group.1"="CLASS", "Group.2"="t_pop"))
figure_2b_agg <- merge(figure_2b_agg,figure_2b_sd, by=c("CLASS","t_pop"))
# Figure 2b for each mobility with mean and sd
for (mobility in mobilities)
{
figure_2b_alt <- (ggplot(figure_2b_agg, aes_string(x = "t_pop", y = paste(mobility,".x",sep=""), colour = "CLASS"))
+ geom_line(size=1,show.legend = FALSE,na.rm=TRUE)
+ geom_ribbon(aes_string(ymin=paste(mobility,".x-",mobility,".y",sep=""), ymax=paste(mobility,".x+",mobility,".y",sep=""), fill = "CLASS"), linetype=2, alpha=0.1, show.legend = FALSE)
+ geom_vline(xintercept=0,linetype="dashed", color=my_palette_2, size=1)
#+ annotate("text",x=2,y=27,hjust=0,label="T0 (First Day Surpassing Cumulative 5 Cases per Million)",color=my_palette_2)
+ theme_light()
+ coord_cartesian(xlim=c(t_min, t_max))
+ scale_color_manual(values = my_palette_1, name = "Epidemic Wave State", labels = c("Entering First Wave", "Past First Wave", "Entering Second Wave","Past Second Wave"))
+ theme(plot.title=element_text(hjust = 0.5), axis.line=element_line(color="black",size=0.7),axis.ticks=element_line(color="black",size=0.7))
+ scale_x_continuous(breaks=seq(floor(t_min/10)*10,ceiling(t_max/10)*10,10),expand=c(0,0),limits=c(t_min,t_max))
+ scale_y_continuous(expand = c(0,0))
+ labs(title = paste("Average ",mobility," Mobility Over Time",sep=""), x = "Days Since T0", y = paste(mobility," Mobility (Change from Baseline, Smoothed)",sep="")))
ggsave(paste("./plots/figure_2b_se_",mobility,".png",sep=''), plot = figure_2b_alt, width = 9,  height = 7)
}
# Figure 2c: Scatter plot of government response time against number of cases for each country
figure_2c <- (ggplot(figure_2c_data, aes(x = GOV_MAX_SI_DAYS_FROM_T0_POP, y = EPI_DEAD_PER_10K, colour = CLASS))
+ geom_point(size=1.5,shape=1,alpha=0.9,stroke=1.5, na.rm=TRUE)
+ geom_vline(xintercept=0,linetype="dashed", color=my_palette_2, size=1)
+ annotate("text",x=2,y=490,hjust=0,label="T0",color=my_palette_2)
# Label countries that have high number of deaths, or early/late government response times
+ geom_text(data=subset(figure_2c_data,
(COUNTRYCODE %in% label_countries) |
(EPI_CONFIRMED_PER_10K >= quantile(figure_2c_data$EPI_CONFIRMED_PER_10K, 0.95,na.rm=TRUE)) |
(GOV_MAX_SI_DAYS_FROM_T0_POP >= quantile(figure_2c_data$GOV_MAX_SI_DAYS_FROM_T0_POP, 0.95,na.rm=TRUE)) |
(GOV_MAX_SI_DAYS_FROM_T0_POP <= quantile(figure_2c_data$GOV_MAX_SI_DAYS_FROM_T0_POP, 0.02,na.rm=TRUE))),
aes(label=COUNTRY),
hjust=-0.1, vjust=-0.1,
show.legend = FALSE)
+ theme_light()
+ theme(plot.title=element_text(hjust = 0.5), axis.line=element_line(color="black",size=0.7),axis.ticks=element_line(color="black",size=0.7))
+ scale_color_manual(values = my_palette_1, name = "Epidemic Wave State", labels = c("Entering First Wave", "Past First Wave", "Entering Second Wave","Past Second Wave"))
+ scale_x_continuous(breaks=seq(-125,200,25),expand = c(0,0),limits = c(-125, 200))
+ scale_y_continuous(trans='log10', breaks = log_breaks(n=10,base=10))
+ labs(title = "Total Deaths Against Government Response Time", x = "Government Response Time (Days from T0 to Peak of Stringency)", y = "Total Deaths per 10,000 Population"))
figure_2_all <- grid.arrange(grobs=list(figure_2a_alt,figure_2b_se_residential,figure_2c),
widths = c(1, 1.2),
layout_matrix = rbind(c(1, 3),
c(2,  3)),
top = "Figure 2: Government and Public Response")
mobility = 'residential'
figure_2b_alt <- (ggplot(figure_2b_agg, aes_string(x = "t_pop", y = paste(mobility,".x",sep=""), colour = "CLASS"))
+ geom_line(size=1,show.legend = FALSE,na.rm=TRUE)
+ geom_ribbon(aes_string(ymin=paste(mobility,".x-",mobility,".y",sep=""), ymax=paste(mobility,".x+",mobility,".y",sep=""), fill = "CLASS"), linetype=2, alpha=0.1, show.legend = FALSE)
+ geom_vline(xintercept=0,linetype="dashed", color=my_palette_2, size=1)
#+ annotate("text",x=2,y=27,hjust=0,label="T0 (First Day Surpassing Cumulative 5 Cases per Million)",color=my_palette_2)
+ theme_light()
+ coord_cartesian(xlim=c(t_min, t_max))
+ scale_color_manual(values = my_palette_1, name = "Epidemic Wave State", labels = c("Entering First Wave", "Past First Wave", "Entering Second Wave","Past Second Wave"))
+ theme(plot.title=element_text(hjust = 0.5), axis.line=element_line(color="black",size=0.7),axis.ticks=element_line(color="black",size=0.7))
+ scale_x_continuous(breaks=seq(floor(t_min/10)*10,ceiling(t_max/10)*10,10),expand=c(0,0),limits=c(t_min,t_max))
+ scale_y_continuous(expand = c(0,0))
+ labs(title = paste("Average ",mobility," Mobility Over Time",sep=""), x = "Days Since T0", y = paste(mobility," Mobility (Change from Baseline, Smoothed)",sep="")))
figure_2_all <- grid.arrange(grobs=list(figure_2a_alt,figure_2b_alt,figure_2c),
widths = c(1, 1.2),
layout_matrix = rbind(c(1, 3),
c(2,  3)),
top = "Figure 2: Government and Public Response")
figure_2_all
ggsave("./plots/figure_2.png", plot = figure_2_all, width = 15,  height = 8)
